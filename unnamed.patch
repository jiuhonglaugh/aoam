Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision )
+++ .idea/modules.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/aoam.iml" filepath="$PROJECT_DIR$/.idea/aoam.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision )
+++ .idea/vcs.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: setup/shell/ssh.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/shell/ssh.sh	(revision )
+++ setup/shell/ssh.sh	(revision )
@@ -0,0 +1,10 @@
+#! /bin/sh
+
+username=$1
+if [ -f "/home/$username/.ssh/id_rsa.pub" ];then
+        echo -e "\033[35m SSHÂ∑≤ÁªèÁîüÊàê \033[0m"
+else
+	echo -e "\033[35m Ê≠£Âú®ÁîüÊàêÂÖçÂØÜÈí•SSH \033[0m"
+	ssh-keygen -t rsa -P '' -f /home/$username/.ssh/id_rsa>/dev/null 2>&1
+fi
+
Index: setup/xx.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/xx.txt	(revision )
+++ setup/xx.txt	(revision )
@@ -0,0 +1,2 @@
+xxxx
+172.10.22.57 | SUCCESS | rc=0 >> hadoop [35m SSHÂ∑≤ÁªèÁîüÊàê [0m
Index: setup/ssh.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/ssh.sh	(revision )
+++ setup/ssh.sh	(revision )
@@ -0,0 +1,9 @@
+#! /bin/sh
+
+if [ -f "/home/dianyou/.ssh/id_rsa.pub" ];then
+        echo -e "\033[35m SSHÂ∑≤ÁªèÁîüÊàê \033[0m"
+else
+	echo -e "\033[35m Ê≠£Âú®ÁîüÊàêÂÖçÂØÜÈí•SSH \033[0m"
+	ssh-keygen -t rsa -P '' -f /home/dianyou/.ssh/id_rsa>/dev/null 2>&1
+fi
+
Index: setup/xxx/ssh.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/xxx/ssh.sh	(revision )
+++ setup/xxx/ssh.sh	(revision )
@@ -0,0 +1,10 @@
+#! /bin/sh
+
+username=$1
+if [ -f "/home/$username/.ssh/id_rsa.pub" ];then
+        echo -e "\033[35m SSHÂ∑≤ÁªèÁîüÊàê \033[0m"
+else
+	echo -e "\033[35m Ê≠£Âú®ÁîüÊàêÂÖçÂØÜÈí•SSH \033[0m"
+	ssh-keygen -t rsa -P '' -f /home/$username/.ssh/id_rsa>/dev/null 2>&1
+fi
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision )
+++ .idea/misc.xml	(revision )
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.5.2 (D:\soft\Python35\python.exe)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: setup/proc_memlog.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/proc_memlog.txt	(revision )
+++ setup/proc_memlog.txt	(revision )
@@ -0,0 +1,82 @@
+
+VmRSS:	  136492 kB
+19-11-25 10:11:30
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:31
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:32
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:33
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:35
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:36
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:37
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:38
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:11:39
+VmRSS:	  136492 kB
+Cpu: 
+
+19-11-25 10:12:38
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:40
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:41
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:42
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:43
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:44
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:45
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:47
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:48
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:49
+VmRSS:	  136492 kB
+Cpu:  0.0
+
+19-11-25 10:12:50
+VmRSS:	  136492 kB
+Cpu:  0.0
+
Index: .idea/aoam.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/aoam.iml	(revision )
+++ .idea/aoam.iml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
+  </component>
+</module>
\ No newline at end of file
Index: setup/source/hosts.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/source/hosts.ini	(revision )
+++ setup/source/hosts.ini	(revision )
@@ -0,0 +1,31 @@
+#
+#C:\Users\MAIBENBEN\AppData\Local\GitHub\PortableGit_284a859b0e6deba86edc624fef1e4db2aa8241a9\git-bash.exe
+[hosts]
+slave1=172.10.22.57
+master=172.10.22.56
+[passwd]
+172.10.22.57=idianyou
+[username]
+user=dianyou
+group=dianyou
+[path]
+dest=/zywa/test/setup/xxx
+src=/zywa/test/setup/shell/
+passwd=idianyou
+master=172.10.22.56
+[softpath]
+#Ëß£ÂéãÂÆâË£ÖÁõÆÂΩï
+jdk_path=/zywa/soft/jdk.tar.gz
+hadoop_path=/zywa/soft/hadoop-2.9.0.tar.gz
+[setuppath]
+jdk_setup_path=/zywa/setup/jdk
+hadoop_setup_path=/zywa/setup/hadoop-2.9.0
+[basepath]
+setuppath=/zywa/setup
+softpath=/zywa/soft
+[master]
+node1=172.10.22.56
+node2=172.10.22.57
+[service]
+node1=NameNode|ResourceManager|SecondaryNameNode
+node2=DataNode|NodeManager
Index: setup/tmp.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/tmp.txt	(revision )
+++ setup/tmp.txt	(revision )
@@ -0,0 +1,6 @@
+Hadoop 2.9.0
+Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git -r 756ebc8394e473ac25feac05fa493f6d612e6c50
+Compiled by arsuresh on 2017-11-13T23:15Z
+Compiled with protoc 2.5.0
+From source with checksum 0a76a9a32a5257331741f8d5932f183
+This command was run using /zywa/setup/hadoop-2.9.0/share/hadoop/common/hadoop-common-2.9.0.jar
\ No newline at end of file
Index: setup/shell/authorized_key.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/shell/authorized_key.sh	(revision )
+++ setup/shell/authorized_key.sh	(revision )
@@ -0,0 +1,12 @@
+#!/usr/bin/expect
+
+set password [lindex $argv 0]
+set username [lindex $argv 1]
+set ip [lindex $argv 2]
+
+spawn scp -r $username@$ip:/home/$username/.ssh/id_rsa.pub /home/$username
+expect "Password:"
+send "$password\r"
+interact
+
+
Index: setup/test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/test.py	(revision )
+++ setup/test.py	(revision )
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+#-*- coding:utf-8 -*-
+#scriptname:py.test.py
+
+import subprocess
+import re
+
+def get_foo():
+    return "foo"
+ 
+def get_bar():
+    return "bar"
+
+def get_data():
+	result = subprocess.run("ansible client -m ping",shell=True)
+	print(result)
+	sub = subprocess.Popen("ansible client -m ping", shell=True, stdout=subprocess.PIPE)
+	content =str(sub.stdout.read(),'utf-8')
+	fo = open("tmp.txt", "w")
+	fo.write(content)
+	fo.close()
+	for line in open("tmp.txt","r"):
+		flag = re.findall("=>",line)
+		if(len(flag)>0):
+			arr = line.split("=>")[0].split("|")
+			if(arr[1].strip() != "SUCCESS"):
+				print(arr[0],"Êó†Ê≥ïÈÄöËÆØ")
+
+
+
+if __name__ == "__main__":
+	get_data()
Index: setup/vc.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/vc.sh	(revision )
+++ setup/vc.sh	(revision )
@@ -0,0 +1,13 @@
+#!/bin/bash
+pid=$1  #Ëé∑ÂèñËøõÁ®ãpid
+echo $pid
+interval=1  #ËÆæÁΩÆÈááÈõÜÈó¥Èöî
+while true
+do
+    echo $(date +"%y-%m-%d %H:%M:%S") >> proc_memlog.txt
+    cat  /proc/$pid/status|grep -e VmRSS >> proc_memlog.txt    #Ëé∑ÂèñÂÜÖÂ≠òÂç†Áî®
+    cpu=`top -n 1 -p $pid|tail -2|head -1|awk '{ssd=NF-4} {print $ssd}'`    #Ëé∑ÂèñcpuÂç†Áî®
+    echo "Cpu: " $cpu >> proc_memlog.txt
+    echo $blank >> proc_memlog.txt
+    sleep $interval
+done
Index: setup/xx.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/xx.sh	(revision )
+++ setup/xx.sh	(revision )
@@ -0,0 +1,25 @@
+#!/bin/bash
+pid=$1 #Ëé∑ÂèñËøõÁ®ãpid
+echo $pid
+interval=1 #ËÆæÁΩÆÈááÈõÜÈó¥Èöî
+while true
+do
+echo $(date +"%y-%m-%d %H:%M:%S") >> proc_memlog.txt
+cat /proc/$pid/status|grep -e VmRSS >> proc_memlog.txt #Ëé∑ÂèñÂÜÖÂ≠òÂç†Áî®
+cpu=`top -b -n 1 -p $pid  2>&1 | awk -v pid=$pid '{if ($1 == pid)print $9}'` #Ëé∑ÂèñcpuÂç†Áî®
+echo "Cpu: " $cpu >> proc_memlog.txt
+echo $blank >> proc_memlog.txt
+sleep $interval
+done
+
+
+cpu_core=$(grep -c processor /proc/cpuinfo)
+total_time1=$(awk '{if ($1 == "cpu") {sum = $2 + $3 + $4 + $5 + $6 + $7 + $8 + $9 + $10 + $11;print sum}}' /proc/stat)
+cpu_time1=$(awk '{sum=$14 + $15;print sum}' /proc/$pid/stat)
+sleep 1
+total_time2=$(awk '{if ($1 == "cpu") {sum = $2 + $3 + $4 + $5 + $6 + $7 + $8 + $9 + $10 + $11;print sum}}' /proc/stat)
+cpu_time2=$(awk '{sum=$14 + $15;print sum}' /proc/$pid/stat)
+awk -v cpu_time1=$cpu_time1 -v total_time1=$total_time1 -v cpu_time2=$cpu_time2 -v total_time2=$total_time2 -v cpu_core=$cpu_core 'BEGIN{cpu=((cpu_time2 - cpu_time1) / (total_time2 - total_time1)) * 100*cpu_core;print cpu}'
+
+echo $cpu_core $total_time1 $cpu_time1 $total_time2 $cpu_time2 $cpu_core
+
Index: setup/shell/source.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/shell/source.sh	(revision )
+++ setup/shell/source.sh	(revision )
@@ -0,0 +1,6 @@
+#!/bin/sh
+source /home/dianyou/.bashrc
+
+[ $? -eq 0 ] && echo "succ" || echo "Faild"
+
+echo "ÂàùÂßãÂåñÈÖçÁΩÆÊñá‰ª∂..."
Index: setup/hosts.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/hosts.py	(revision )
+++ setup/hosts.py	(revision )
@@ -0,0 +1,285 @@
+#!/usr/bin/python3
+# -*- encoding:utf-8 -*-
+#scriptname:py.hosts.py
+
+import configparser
+import re
+import subprocess
+import os
+import threading
+import time
+
+
+'''
+ËØªÂèñËá™ÂÆö‰πâhostsÊñá‰ª∂
+IPÂíå‰∏ªÊú∫ÁöÑÊò†Â∞ÑÂÖ≥Á≥ª
+'''
+config = configparser.ConfigParser()
+config.read("source/hosts.ini")
+
+'''
+‰øÆÊîπhostÊñá‰ª∂ÔºåIPÂíåÂüüÂêçÁöÑÊò†Â∞Ñ
+'''
+content = open("/etc/hosts","r").read()
+def check_hosts():
+	num = 0
+	for key in config["hosts"]:
+		hostname = config["hosts"][key] + " " + key
+		if(len(re.findall(hostname,content))>0):
+			#print("\033[32m "+hostname+"Â∑≤ÁªèÈÖçÁΩÆÂà∞hostsÊñá‰ª∂ \033[0m")
+			pass
+		else:
+			num += 1
+			#print("\033[31m "+hostname+"Â∞öÊú™ÈÖçÁΩÆÂà∞hostsÊñá‰ª∂ \033[0m")
+			#print("\033[33m Ê≥®ÊÑèÔºöÂ¶ÇÊûúÊ£ÄÊµãÂ∑≤ÁªèÈÖçÁΩÆÔºåËØ∑Á°ÆËÆ§IPÂíåÂüüÂêçÊòØÂê¶‰∏∫‰∏Ä‰∏™Á©∫Ê†º \033[0m")
+	return num
+
+def get_passwd():
+	dirs="("
+	for key in config["passwd"]:
+		dirs += "["+key+"]=\""+config["passwd"][key]+"\" "
+	dirs += ")"
+	return dirs
+
+def check_ssh():
+	user = config["username"]["user"]
+	rsa = os.path.exists("/home/"+user+"/.ssh/id_rsa.pub")
+	authorized = os.path.exists("/home/"+user+"/.ssh/authorized_keys")
+	if rsa and authorized:
+		return 0
+	else:
+		return 1;
+
+'''
+‰øÆÊîπansibleÁöÑhostsÈÖçÁΩÆÊñá‰ª∂
+'''
+def check_ansible_host():
+	content=open("/etc/ansible/hosts").read()
+	_ansibleclient=""
+	if(len(re.findall("client",content))<1):
+        	_ansibleclient="[client]\n"
+
+	for key in config["client"]:
+        	_ip = hostname=config["client"][key]
+        	if(len(re.findall(_ip,content))<1):
+                	_ansibleclient=_ansibleclient+_ip+"\n"
+	return _ansibleclient
+
+
+def check_ansible_client():
+	result = subprocess.run("ansible client -m ping",shell=True)
+	sub = subprocess.Popen("ansible client -m ping", shell=True, stdout=subprocess.PIPE)
+	content =str(sub.stdout.read(),'utf-8')
+	fo = open("tmp.txt", "w")
+	fo.write(content)
+	fo.close()
+
+def make_ansible_ssh():
+	line=get_file_data()
+	array = line[1:len(line)-1].split(" ")
+	ssh = 'ansible client -l '+array[0]+' -m shell -a "'+array[1]+'/ssh.sh '+array[2]+'"'
+	result = subprocess.Popen(ssh, shell=True, stdout=subprocess.PIPE)
+	content =str(result.stdout.read(),'utf-8')
+	fo = open("tmp.txt", "w")
+	fo.write(content)
+	fo.close()
+	ip=""
+	num=0
+	for line in open("tmp.txt","r"):
+		arr=line.split("|")
+		flag=re.findall("ÁîüÊàêÂÖçÂØÜÈí•SSH",arr[0])
+		if(len(arr)>1):
+			ip=arr[0]
+		elif(len(flag)>0):
+			ssh="shell/authorized_key.sh "+array[5]+" "+array[2]+" "+ip
+			subprocess.run(ssh,shell=True)
+			ssh="cat /home/"+array[2]+"/id_rsa.pub >> /home/"+array[2]+"/.ssh/authorized_keys"
+			subprocess.run(ssh,shell=True)	
+			num +=1
+			print("Â§çÂà∂ÂÆåÊàê...")
+	if(num>0):
+		ssh="ansible "+array[0]+" -m copy -a \"src='/home/"+array[2]+"/.ssh/authorized_keys' dest='/home/"+array[2]+"/.ssh/' owner='"+array[2]+"' group='"+array[3]+"' backup=no\" -o -f 6"
+		subprocess.run(ssh,shell=True)
+	return num
+
+def make_ansible_client():
+	value=0
+	for line in open("tmp.txt","r"):
+		flag = re.findall("=>",line)
+		if(len(flag)>0):
+			arr = line.split("=>")[0].split("|")
+			if(arr[1].strip() != "SUCCESS"):
+				value += 1
+	return value
+
+def get_file_data():
+	value=""
+	for key in config["hosts"]:
+		if(len(value)<1):
+			value="("+config["hosts"][key]
+		else:
+			value += ","+config["hosts"][key]
+
+	value +=" "+config["path"]["dest"]+" "+config["username"]["user"]+" "+config["username"]["group"]+" "+config["path"]["src"]+" "+config["path"]["passwd"]+" "+config["path"]["master"]+")"
+	return value
+
+def setup_jdk():
+	_source=get_file_data()
+	_source=_source[1:len(_source)-1].split(" ")
+	out = subprocess.getoutput("java -version")
+	print("ËæìÂá∫ÂÜÖÂÆπÔºö",len(re.findall("java version",out)))
+	if(len(re.findall("java version",out))<1):
+		_setup=config["setuppath"]["jdk_setup_path"]
+		_soft=config["softpath"]["jdk_path"]
+		_base=os.path.dirname(_soft)
+		_old_list=os.listdir(_base)
+		_base_path=config["basepath"]["setuppath"]
+		_setup_jdk_path=config["setuppath"]["jdk_setup_path"]
+		print(_setup_jdk_path)
+		if(os.path.exists(_setup)):
+			print("jdkÂ∑≤ÁªèËß£Âéã")
+		else:
+			subprocess.run("tar -zxvf "+_soft+" -C "+_base,shell=True)
+			_new_list=os.listdir(_base)
+			_jdk=_setup_jdk_path.split("/")[len(_setup_jdk_path.split("/"))-1]
+			_jdk_soft_path=_base+"/"+_jdk
+			for ip in _source[0].split(","):
+				_ssh="scp -r "+_jdk_soft_path+" "+_source[2]+"@"+ip+":"+_base_path
+				subprocess.run(_ssh,shell=True)
+			if(len(_jdk_soft_path)>0):
+				subprocess.run("rm -rf "+_jdk_soft_path,shell=True)
+		
+		content = open("/home/"+_source[2]+"/.bashrc","r").read()		
+		if(len(re.findall("JAVA_HOME",content))<1):
+			_line="echo 'export JAVA_HOME="+_setup_jdk_path+"\nexport PATH=$PATH:$JAVA_HOME/bin' >>~/.bashrc"
+			subprocess.run(_line,shell=True)
+		else:
+			print("JDKÁéØÂ¢ÉÂèòÈáèÂ∑≤ÁªèÈÖçÁΩÆ")
+		_ssh="source shell/source.sh "+_source[2]
+		subprocess.run(_ssh,shell=True)
+	else:
+        	print("JDKÂ∑≤ÁªèÂÆâË£ÖÔºö",out)
+
+	
+
+def check(v):
+	return '([key1]="value1" [key2]="value2" [key3]="value3")'
+
+def setup_hadoop():
+	out = subprocess.getoutput("hadoop version")
+	fo = open("tmp.txt", "w")
+	fo.write(out)
+	fo.close()
+	_version=""
+	_num=0
+	for line in open("tmp.txt","r"):
+		_num +=1
+		if(len(_version)<1):
+			_version=line
+	if(_num>1):
+		print("ÂΩìÂâçHadoopÁâàÊú¨Ôºö",_version)
+	else:
+		_source=get_file_data()
+		_source=_source[1:len(_source)-1].split(" ")
+		_soft=config["softpath"]["hadoop_path"]
+		_base=os.path.dirname(_soft)
+		_old_list=os.listdir(_base)
+		_base_path=config["basepath"]["setuppath"]
+		_setup_hadoop_path=config["setuppath"]["hadoop_setup_path"]
+		if(os.path.exists(_setup_hadoop_path)):
+			print("HadoopÂ∑≤ÁªèËß£Âéã")
+		else:
+			subprocess.run("tar -zxvf "+_soft+" -C "+_base,shell=True)
+			_new_list=os.listdir(_base)
+			_hadoop=_setup_hadoop_path.split("/")[len(_setup_hadoop_path.split("/"))-1]
+			_hadoop_soft_path=_base+"/"+_hadoop
+			_base_path=config["basepath"]["setuppath"]
+			_setup_hadoop_path=config["setuppath"]["hadoop_setup_path"]
+			for ip in _source[0].split(","):
+				_ssh="scp -r "+_hadoop_soft_path+" "+_source[2]+"@"+ip+":"+_base_path
+				subprocess.run(_ssh,shell=True)
+			if(len(_hadoop_soft_path)>0):
+				subprocess.run("rm -rf "+_hadoop_soft_path,shell=True)
+
+		if(len(re.findall("HADOOP_HOME",content))<1):
+			_var=["export HADOOP_HOME=/zywa/setup/hadoop-2.9.0","export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin","export LIB_NATIVE_DIR=$HADOOP_HOME/lib/native:$LD_LIBRARY_PATH","export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop"]
+			_line="echo '"+"\n".join(_var)+"' >>~/.bashrc"
+			subprocess.run(_line,shell=True)
+		else:
+			print("HadoopÁéØÂ¢ÉÂèòÈáèÂ∑≤ÁªèÈÖçÁΩÆ..")
+		_ssh="source shell/source.sh "+_source[2]
+		subprocess.run(_ssh,shell=True)
+
+def source_pro():
+	line=get_file_data()
+	array = line[1:len(line)-1].split(" ")
+	ssh="ansible "+array[0]+" -m copy -a \"src='/home/"+array[2]+"/.bashrc' dest='/home/"+array[2]+"/' owner='"+array[2]+"' group='"+array[3]+"' backup=no\" -o -f 6"
+	subprocess.run(ssh,shell=True)
+	subprocess.run('ansible client -m shell -a "source /home/'+array[2]+'/.bashrc" -f 3',shell=True)
+
+def check_hadoop():
+	master=config["master"]
+	for key in master:
+		ip = config["master"][key]
+		result = subprocess.Popen('ansible client -l '+ip+' -a "jps"', shell=True, stdout=subprocess.PIPE)
+		content =str(result.stdout.read(),'utf-8')
+		#ÊúçÂä°ÂàóË°®
+		values = config["service"][key]
+		print(ip+":")
+		for name in values.split("|"):
+			if(len(re.findall(name,content))<1):
+				start_hadoop(ip,name.lower())
+			else:
+				print(name+"ÊúçÂä°Ê≠£Âú®ËøêË°å")
+		print("\n")
+
+def start_hadoop(ip,name):
+	HADOOP_HOME=config["setuppath"]["hadoop_setup_path"]
+	if(name=="secondarynamenode" or name=="namenode" or name=="datanode"):
+		_shell='ansible client -l '+ip+' -a "'+HADOOP_HOME+'/sbin/hadoop-daemon.sh start '+name+'"'
+		subprocess.run(_shell,shell=True)
+	elif(name=="resourcemanager" or name=="nodemanager"):
+		_shell='ansible client -l '+ip+' -a "'+HADOOP_HOME+'/sbin/yarn-daemon.sh start '+name+'"'
+		subprocess.run(_shell,shell=True)
+
+def job():
+	print("\033[35m ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµÁõëÊµã \033[0m")
+	
+	_shell='ansible client -a "free -h"'
+	subprocess.run(_shell,shell=True)
+	print("\033[35m Á£ÅÁõò‰ΩøÁî®ÊÉÖÂÜµÁõëÊµã \033[0m")
+	_shell='ansible client -a "df -lh"'
+	subprocess.run(_shell,shell=True)
+	print("\033[35m CPU‰ΩøÁî®Ë¥üËΩΩÁõëÊµã \033[0m")
+	_shell="ansible client -a 'uptime'"
+	subprocess.run(_shell,shell=True)
+	print("\033[35m ÊúçÂä°Ê£ÄÊµã \033[0m")
+	check_hadoop()
+
+def run():
+	while 1:
+		job()
+		time.sleep(10)
+'''
+	scheduler = BlockingScheduler()
+	scheduler.add_job(job,"cron",day_of_week="0-6",minute="*")
+	scheduler.start()
+'''
+if __name__ == "__main__":
+	run()
+	#check_hadoop()
+	#start_hadoop("172.10.22.56","secondarynamenode")
+	#source_pro()
+	#setup_hadoop()
+	#setup_jdk()
+	#make_ansible_ssh()
+	#make_ansible_client()
+	#num = check_ssh()
+	#print(num)
+	#print(check("xxx"))
+	#$get_hosts()
+	#pass
+
+
+
+
Index: setup/start.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/start.sh	(revision )
+++ setup/start.sh	(revision )
@@ -0,0 +1,115 @@
+#! /bin/sh
+
+echo "********************Ê≠£Âú®Ê£ÄÊµã‰æùËµñ**************************" 
+count=0
+sshpass -V >> /dev/null
+if [ $? != 0 ];then
+    echo -e "\033[31m ËØ∑ÂÆâË£Össhpass \033[0m"
+    count=$((${count} + 1))
+else
+    echo -e "\033[32m sshpassÂ∑≤ÁªèÂÆâË£Ö \033[0m"
+fi
+ansible --version >> /dev/null
+if [ $? != 0 ];then
+    echo -e "\033[31m ËØ∑ÂÆâË£Öansible \033[0m"
+    count=$((${count} + 1))
+else
+    echo -e "\033[32m ansibleÂ∑≤ÁªèÂÆâË£Ö \033[0m"
+fi
+
+python3 -V >> /dev/null
+if [ $? != 0 ];then
+    echo -e "\033[31m ËØ∑ÂÆâË£Öpython \033[0m"
+    count=$((${count} + 1))
+else
+    echo -e "\033[32m pythonÂ∑≤ÁªèÂÆâË£Ö \033[0m"
+fi
+
+if [ $count -gt 0 ];then
+	echo -e "\033[31m Áº∫Â∞ë $count ‰∏™‰æùËµñÔºåËØ∑ÂÖàÂÆâË£Ö‰æùËµñ \033[0m" 
+	exit 1
+else
+	echo -e "\033[32m ‰æùËµñÊ£ÄÊµãÂÆåÊØïÔºåÂáÜÂ§áÂÆâË£ÖÁªÑ‰ª∂..... \033[0m"
+fi
+
+count=`python3 -c 'import hosts; print(hosts.check_hosts())'`
+if [ $count -gt 0 ];then
+	echo -e "\033[31m hostsÊ£ÄÊµãÊúâËØØ,ËØ∑‰øÆÂ§çÂêéÊâçËÉΩÁªßÁª≠ \033[0m"
+	exit 1
+else
+	echo -e "\033[32m hostsÊ£ÄÊµãÂÆåÊØï..... \033[0m"
+fi
+
+declare -A map=`python3 -c 'import hosts; print(hosts.get_passwd())'`
+declare -a user_data=`python3 -c 'import hosts; print(hosts.get_file_data())'`
+
+result=`python3 -c 'import hosts; print(hosts.check_ssh())'`
+
+if [ $result -eq 1 ];then 
+	echo -e "\033[35m Ê≠£Âú®ÁîüÊàêÂÖçÂØÜÈí•SSH \033[0m"
+	ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa>/dev/null 2>&1
+	cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
+	chmod 600 ~/.ssh/authorized_keys
+	for key in $(echo ${!map[*]})
+	do
+		sshpass -p${map[$key]} ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no -p22 ${user_data[2]}@$key	
+        	echo "$key : ${map[$key]}"
+	done
+else
+	echo -e "\033[32m SSHÂØÜÈí•Â∑≤ÁªèÁîüÊàê \033[0m"
+fi
+
+python3 -c 'import hosts; print(hosts.check_ansible_client())'
+
+result=`python3 -c 'import hosts; print(hosts.make_ansible_client())'`
+
+if [ $result -ne 0 ];then
+	echo -e "\033[31mÊúâ$result ‰∏™IPÈ™åËØÅÊú™ÈÄöËøá \033[0m"
+	exit
+else
+	echo -e "\033[32m ansible ÈÖçÁΩÆÈ™åËØÅÊàêÂäü... \033[0m"
+fi
+
+echo -e "\033[35m ÂàõÂª∫ÁõÆÂΩïÂ≠òÂÇ®shellËÑöÊú¨ \033[0m"
+declare -a result=`python3 -c 'import hosts; print(hosts.get_file_data())'`
+ansible ${result[0]} -m file -a 'path='${result[1]}' state=directory owner='${result[2]}' group='${result[3]}' mode=0777 recurse=yes'
+echo -e "\033[35m Ê≠£Âú®ËøúÁ®ãÂ§çÂà∂shellËÑöÊú¨ \033[0m"
+ansible ${result[0]} -m copy -a "src='${result[4]}' dest='${result[1]}' mode=0777 owner='${result[2]}' group='${result[3]}' backup=no" -o -f 6
+echo -e "\033[35m ÊâßË°åËøúÁ®ãshellËÑöÊú¨ÁîüÊàêssh \033[0m"
+result=`python3 -c 'import hosts; print(hosts.make_ansible_ssh())'`
+array=(${result// / })
+len=${#array[*]}
+num=${array[$len-1]}
+
+if [ $num -ne 0 ];then
+	echo "Êõ¥Êñ∞ÂÆåÊØï..."
+else
+	echo "Êó†ÈúÄÊâßË°å..."
+fi
+
+echo -e "\033[32m Ê≠£Âú®ÂÆâË£ÖJDK... \033[0m"
+python3 -c 'import hosts; print(hosts.setup_jdk())'
+
+echo -e "\033[32m Ê≠£Âú®ÂÆâË£ÖHADOOP... \033[0m"
+python3 -c 'import hosts; print(hosts.setup_hadoop())'
+
+echo -e "\033[32m Ê≠£Âú®Ê£ÄÊµãHADOOPÊúçÂä°... \033[0m"
+python3 -c 'import hosts; print(hosts.check_hadoop())'
+
+#source shell/source.sh
+
+#_result=`ansible client -l ${result[0]} -m shell -a "${result[1]}/ssh.sh ${result[2]}"`
+#echo $_result >> xx.txt
+#ÈÄöËøáÈÄóÂè∑ÂàÜÈöîIP
+#IPS=${result[0]}
+#array=(${IPS//,/ })
+#for ip in ${array[@]}
+#do
+#	echo ${result[5]} ${result[2]} $ip
+#	./shell/authorized_key.sh ${result[5]} ${result[2]} $ip
+#	cat /home/${result[2]}/id_rsa.pub >> /home/${result[2]}/.ssh/authorized_keys
+#done
+
+#echo -e "\033[32m ÂêåÊ≠•ÂÖ¨Èí•Âà∞ÂêÑ‰∏™Â≠êËäÇÁÇπ \033[0m"
+#ansible ${result[0]} -m copy -a "src='/home/${result[2]}/.ssh/authorized_keys' dest='/home/${result[2]}/.ssh/' owner='${result[2]}' group='${result[3]}' backup=yes" -o -f 6
+
Index: setup/xxx/authorized_key.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/xxx/authorized_key.sh	(revision )
+++ setup/xxx/authorized_key.sh	(revision )
@@ -0,0 +1,12 @@
+#!/usr/bin/expect
+
+set password [lindex $argv 0]
+set username [lindex $argv 1]
+set ip [lindex $argv 2]
+
+spawn scp -r $username@$ip:/home/$username/.ssh/id_rsa.pub /home/$username
+expect "Password:"
+send "$password\r"
+interact
+
+
Index: setup/xxx/source.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup/xxx/source.sh	(revision )
+++ setup/xxx/source.sh	(revision )
@@ -0,0 +1,8 @@
+#!/bin/sh
+#C:\Users\MAIBENBEN\AppData\Local\GitHub\PortableGit_284a859b0e6deba86edc624fef1e4db2aa8241a9\git-bash.exe
+source /home/dianyou/.bashrc
+
+[ $? -eq 0 ] && echo "succ" || echo "Faild"
+
+echo "ÂàùÂßãÂåñÈÖçÁΩÆÊñá‰ª∂..."
+sleep 10
\ No newline at end of file
